name: CD


on:
  workflow_run:
    workflows: ["CI"]
    branches: ["dev"]
    types:
      - completed
  workflow_dispatch:


jobs:
  tag-latest:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Add tag latest to staged image
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.BACKEND_IMAGE }}:staging
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.BACKEND_IMAGE }}:staging ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.BACKEND_IMAGE }}:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.BACKEND_IMAGE }}:latest
  restart-compose-production:
    needs: tag-latest
    runs-on: ubuntu-latest

    steps:
      - name: Restart docker compose
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          BACKEND_IMAGE: ${{ vars.BACKEND_IMAGE }}
          FRONTEND_IMAGE: ${{ vars.FRONTEND_IMAGE }}
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: DOCKERHUB_USERNAME, BACKEND_IMAGE, FRONTEND_IMAGE
          script: |
            set -euo pipefail

            echo "ðŸš€ Setting directory env variables..."
            REPO_DIR="$HOME/elibrary/projects/production"
            ENV_DIR="$HOME/elibrary/envs/production"
            echo "âœ… Envs set"
            
            if [ -d "$REPO_DIR" ]; then
              echo "ðŸš€ Pulling repo..."
              cd "$REPO_DIR"
              git reset --hard
              git pull
            else
              echo "ðŸš€ Cloning repo..."
              mkdir -p "$REPO_DIR"
              git clone https://github.com/ElectronicLibraryRT/production-docker-compose.git "$REPO_DIR"
              cd "$REPO_DIR"
            fi
            echo "âœ… Repository updated"

            echo "ðŸš€ Copying .env files..."
  
            cp "$ENV_DIR/.env.postgres" "$REPO_DIR/"
            cp "$ENV_DIR/.env.minio" "$REPO_DIR/"
            cp "$ENV_DIR/.env.backend" "$REPO_DIR/"
            cp "$ENV_DIR/.env.frontend" "$REPO_DIR/"

            echo "âœ… .env files copied."
            echo "ðŸš€ Restarting docker compose..."
          
            docker compose pull
            docker compose down --volumes
            docker compose up -d --force-recreate
            docker image prune -f

            echo "âœ… Docker compose restarted"
    
  restart-compose-frontend-env:
    needs: tag-latest
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      BACKEND_IMAGE: ${{ vars.BACKEND_IMAGE }}
    steps:
      - name: Restart docker compose
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: DOCKERHUB_USERNAME, BACKEND_IMAGE
          script: |
            set -euo pipefail

            echo "ðŸš€ Setting directory env variables..."
            REPO_DIR="$HOME/elibrary/projects/frontend-env"
            ENV_DIR="$HOME/elibrary/envs/frontend-env"
            echo "âœ… Envs set"
            
            if [ -d "$REPO_DIR" ]; then
              echo "ðŸš€ Pulling repo..."
              cd "$REPO_DIR"
              git reset --hard
              git pull
            else
              echo "ðŸš€ Cloning repo..."
              mkdir -p "$REPO_DIR"
              git clone https://github.com/ElectronicLibraryRT/frontend-env-docker-compose.git "$REPO_DIR"
              cd "$REPO_DIR"
            fi
            echo "âœ… Repository updated"

            echo "ðŸš€ Copying .env files..."
  
            cp "$ENV_DIR/.env.postgres" "$REPO_DIR/"
            cp "$ENV_DIR/.env.minio" "$REPO_DIR/"
            cp "$ENV_DIR/.env.minio-init" "$REPO_DIR/"
            cp "$ENV_DIR/.env.backend" "$REPO_DIR/"

            echo "âœ… .env files copied."
            echo "ðŸš€ Restarting docker compose..."

            chmod +x "$REPO_DIR/minio/init-minio.sh"
            
            docker compose pull
            docker compose down --volumes
            docker compose up -d --force-recreate
            docker image prune -f

            echo "âœ… Docker compose restarted"
